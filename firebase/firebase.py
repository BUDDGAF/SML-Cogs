# -*- coding: utf-8 -*-

"""
The MIT License (MIT)

Copyright (c) 2017 SML

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
"""


import os
import io
import datetime as dt
import asyncio
import discord

from urllib.parse import urljoin
import pyrebase

from discord import Message
from discord import Server
from discord import ChannelType
from discord.ext import commands
from discord.ext.commands import Command
from discord.ext.commands import Context

from cogs.utils import checks

from __main__ import send_cmd_help

import aiohttp

from cogs.utils.dataIO import dataIO

PATH = os.path.join('data', 'firebase')
JSON = os.path.join(PATH, 'settings.json')
SERVICE_KEY_JSON = os.path.join(PATH, "service_key.json")
APP_NAME = "Discord"

REQUIRED_SETTINGS = [
    'SERVER_KEY',
    'AUTH_DOMAIN',
    'DATABASE_URL',
    'STORAGE_BUCKET',
    'SERVICE_ACCOUNT'
]

HELP_SETTINGS = 'Please set all settings.'


class Firebase:
    """Send activity of Discord using Google Analytics."""

    def __init__(self, bot):
        """Init."""
        self.bot = bot
        self.settings = dataIO.load_json(JSON)
        self._fbapp = None

    @property
    def fbapp(self):
        """Firebase application reference using pyrebase."""
        if self._fbapp is None:
            if not self.check_settings():
                return None
            config = {
                "apiKey": self.settings["SERVER_KEY"],
                "authDomain": self.settings["AUTH_DOMAIN"],
                "databaseURL": self.settings["DATABASE_URL"],
                "storageBucket": self.settings['STORAGE_BUCKET'],
                "serviceAccount": self.settings['SERVICE_ACCOUNT']
            }
            self._fbapp = pyrebase.initialize_app(config)
        return self._fbapp

    def check_settings(self):
        """Check all settings set."""
        for setting in REQUIRED_SETTINGS:
            if setting not in self.settings:
                return False
            if not self.settings[setting]:
                return False
        return True

    @checks.serverowner_or_permissions(manage_server=True)
    @commands.group(pass_context=True)
    async def setfirebase(self, ctx):
        """Set Firebase settings."""
        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)

    @setfirebase.command(name="servicekey", pass_context=True)
    async def setfirebase_service_key(self, ctx):
        """Set Firebase Service key.

        This is generated by the Firebase Console.
        You can get it here:
        https://console.firebase.google.com/project/_/settings/serviceaccounts/adminsdk
        """
        TIMEOUT = 30.0
        await self.bot.say(
            "Please upload the Firebase service account key (json). "
            "[Timeout: {} seconds]".format(TIMEOUT))
        attach_msg = await self.bot.wait_for_message(
            timeout=TIMEOUT,
            author=ctx.message.author)
        if attach_msg is None:
            await self.bot.say("Operation time out.")
            return
        if not len(attach_msg.attachments):
            await self.bot.say("Cannot find attachments.")
            return
        attach = attach_msg.attachments[0]
        url = attach["url"]

        async with aiohttp.get(url) as cred:
            with open(SERVICE_KEY_JSON, "wb") as f:
                f.write(await cred.read())

        await self.bot.say(
            "Attachment received and saved as {}".format(SERVICE_KEY_JSON))

        self.settings['SERVICE_ACCOUNT'] = SERVICE_KEY_JSON
        dataIO.save_json(JSON, self.settings)

        # Delete uploaded attachment
        await self.bot.delete_message(attach_msg)

    @setfirebase.command(name="serverkey", pass_context=True)
    async def setfirebase_server_key(self, ctx, key):
        """Set Firebase Cloud Messaging Server Key.

        This is generated by the Firebase Console
        You can get it here:
        https://console.firebase.google.com/project/_/settings/cloudmessaging
        """
        self.settings["SERVER_KEY"] = key
        dataIO.save_json(JSON, self.settings)
        await self.bot.say("Saved Firebase Cloud Messaging Server Key.")
        await self.bot.delete_message(ctx.message)

    @setfirebase.command(name="authdomain", pass_context=True)
    async def setfirebase_auth_domain(self, ctx, domain):
        """Set Auth Domain.

        This is the URL in this format:
        projectid.firebaseapp.com
        """
        self.settings["AUTH_DOMAIN"] = domain
        dataIO.save_json(JSON, self.settings)
        await self.bot.say("Saved Firebase Auth Domain.")
        await self.bot.delete_message(ctx.message)

    @setfirebase.command(name="databaseurl", pass_context=True)
    async def setfirebase_database_url(self, ctx, url):
        """Set Database URL.

        This is the database URL in this format:
        https://projectid.firebaseio.com
        """
        self.settings["DATABASE_URL"] = url
        dataIO.save_json(JSON, self.settings)
        await self.bot.say("Saved Firebase Database URL.")
        await self.bot.delete_message(ctx.message)

    @setfirebase.command(name="storagebucket", pass_context=True)
    async def setfirebase_storage_bucket(self, ctx, domain):
        """Set Storage Bucket.

        This is the database URL in this format:
        projectid.appspot.com
        """
        self.settings["STORAGE_BUCKET"] = domain
        dataIO.save_json(JSON, self.settings)
        await self.bot.say("Saved Firebase Storage bucket.")
        await self.bot.delete_message(ctx.message)


    @checks.serverowner_or_permissions(manage_server=True)
    @commands.group(pass_context=True)
    async def firebase(self, ctx):
        """Run Firebase commands."""
        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)

    @firebase.command(name="status", pass_context=True)
    async def firebase_status(self, ctx):
        """Show Firebase settings status."""
        if not self.check_settings():
            await self.bot.say("You are missing some settings.")
        em = discord.Embed(title="Firebase Settings")
        for setting in REQUIRED_SETTINGS:
            data_key = setting
            data_value = "--"
            if setting in self.settings:
                data_value = self.settings[setting]
            em.add_field(name=data_key, value=data_value)

        await self.bot.send_message(ctx.message.author, embed=em)
        await self.bot.say("Firebase settings have been sent as DM.")

    @firebase.command(name="toggle", pass_context=True)
    async def firebase_toggle(self, ctx):
        """Toggle server on/off."""
        server = ctx.message.server
        if "SERVERS" not in self.settings:
            self.settings["SERVERS"] = {}
        if server.id not in self.settings["SERVERS"]:
            self.settings["SERVERS"][server.id] = False
        is_on = self.settings["SERVERS"][server.id]
        self.settings["SERVERS"][server.id] = not is_on
        await self.bot.say(
            "Firebase monitoring for this server set to {}.".format(
                self.settings["SERVERS"][server.id]))
        dataIO.save_json(JSON, self.settings)


    @firebase.command(name="data", pass_context=True)
    async def firebase_data(self, ctx, *, msg):
        author = ctx.message.author
        data = {
            "author": author.display_name,
            "author_id": author.id,
            "message": msg
        }
        db = self.fbapp.database()
        db.child("users").push(data)

    async def on_message(self, msg: Message):
        """Track on message."""
        author = msg.author
        server = msg.server

        # check settings are set
        if not self.check_settings():
            return

        # check server is tracked
        tracking_server = False
        try:
            tracking_server = self.settings["SERVERS"][server.id]
        except KeyError:
            return
        if not tracking_server:
            return

        data = {
            "author": author.display_name,
            "author_id": author.id,
            "message": msg.content,
            "datetime": dt.datetime.utcnow().isoformat()
        }
        db = self.fbapp.database()
        db.child("servers").child(server.id).push(data)


def check_folder():
    """Check folder."""
    if not os.path.exists(PATH):
        os.makedirs(PATH)


def check_file():
    """Check files."""
    defaults = {}
    if not dataIO.is_valid_json(JSON):
        dataIO.save_json(JSON, defaults)


def setup(bot):
    """Setup bot."""
    check_folder()
    check_file()
    n = Firebase(bot)
    bot.add_cog(n)

